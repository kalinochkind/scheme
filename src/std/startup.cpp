#include <string>

std::string startup = "(define (> x y) (< y x)) "
        "(define (>= x y) (not (< x y))) "
        "(define (<= x y) (not (< y x))) "
        "(define true (< 0 1)) "
        "(define false (< 1 0)) "
        "(define (not x) (if x false true)) "
        "(define (abs x) (if (< x 0) (- x) x)) "
        "(define (positive? x) (> x 0)) "
        "(define (negative? x) (< x 0)) "
        "(define (zero? x) (= x 0)) "
        "(define (list . x) x) "
        "(define nil (list)) "
        "(define (newline) (display \"\n\")) "
        "(define (min a . l)"
        "  (define (min-iter a l)"
        "    (cond ((null? l) a) ((< a (car l)) (min-iter a (cdr l))) (else (min-iter (car l) (cdr l)))))"
        "  (min-iter a l)) "
        "(define (max a . l)"
        "  (define (max-iter a l)"
        "    (cond ((null? l) a) ((< (car l) a) (max-iter a (cdr l))) (else (max-iter (car l) (cdr l)))))"
        "  (max-iter a l)) "
        "(define (map fun . args)"
        "  (define (cars l) (if (null? l) nil (cons (car (car l)) (cars (cdr l)))))"
        "  (define (cdrs l) (if (null? l) nil (cons (cdr (car l)) (cdrs (cdr l)))))"
        "  (define (nils l) (and (not (null? l)) (or (null? (car l)) (nils (cdr l)))))"
        "  (if (or (null? args) (nils args)) nil (cons (apply fun (cars args)) (apply map fun (cdrs args))))) "
        "(define (for-each fun . args)"
        "  (define (cars l) (if (null? l) nil (cons (car (car l)) (cars (cdr l)))))"
        "  (define (cdrs l) (if (null? l) nil (cons (cdr (car l)) (cdrs (cdr l)))))"
        "  (define (nils l) (and (not (null? l)) (or (null? (car l)) (nils (cdr l)))))"
        "  (cond ((or (null? args) (nils args)) \"\") (else (apply fun (cars args)) (apply for-each fun (cdrs args))))) "
        "(define (length l)"
        "  (define (length-iter l c) (if (null? l) c (length-iter (cdr l) (+ c 1))))"
        "  (length-iter l 0)) "
        "(define (append . x)"
        "  (define (f x y) (if (null? x) y (cons (car x) (f (cdr x) y))))"
        "  (fold-right f nil x)) "
        "(define (even? x) (= 0 (remainder x 2))) "
        "(define (odd? x) (not (even? x))) "
        "(define (filter predicate sequence)"
        "  (cond ((null? sequence) nil) ((predicate (car sequence)) (cons (car sequence)"
        "  (filter predicate (cdr sequence)))) (else (filter predicate (cdr sequence))))) "
        "(define (fold-right op initial sequence)"
        "  (if (null? sequence) initial (op (car sequence) (fold-right op initial (cdr sequence))))) "
        "(define (fold-left op initial sequence)"
        "  (define (iter result rest) (if (null? rest) result (iter (op result (car rest))"
        "  (cdr rest)))) (iter initial sequence)) "
        "(define (reverse items)"
        "  (fold-left (lambda (x y) (cons y x)) nil items)) "
        "(define (null? x) (eq? x nil)) "
        "(define (equal? a b)"
        "  (if (and (pair? a) (pair? b)) (and (equal? (car a) (car b)) (equal? (cdr a) (cdr b))) (eq? a b))) "
        "(define quotient /) "
        "(define (gcd a b) (if (= b 0) a (gcd b (remainder a b)))) "
        "(define (last-pair x) (if (pair? (cdr x)) (last-pair (cdr x)) x)) "
        "(define (append! x . y)"
        "  (define (f x y) (set-cdr! (last-pair x) y) x)"
        "  (if (null? y) x (f x (apply append! y)))) "
        "(define stream-car car) "
        "(define (stream-cdr x) (force (cdr x))) "
        "(define stream-null? null?) "
        "(define the-empty-stream nil) "
        "(define (stream-map fun . args)"
        "  (define (cars l) (if (null? l) nil (cons (stream-car (car l)) (cars (cdr l)))))"
        "  (define (cdrs l) (if (null? l) nil (cons (stream-cdr (car l)) (cdrs (cdr l)))))"
        "  (define (nils l) (and (not (null? l)) (or (stream-null? (car l)) (nils (cdr l)))))"
        "  (if (or (null? args) (nils args)) the-empty-stream (cons-stream (apply fun (cars args)) (apply stream-map fun (cdrs args))))) "
        "(define (stream-ref stream k) (if (= k 0) (stream-car stream) (stream-ref (stream-cdr stream) (- k 1)))) "
        "(define (stream-head stream k) (if (= k 0) nil (cons (stream-car stream) (stream-head (stream-cdr stream) (- k 1))))) "
        "(define system-global-environment (the-environment))";
